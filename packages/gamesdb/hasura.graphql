schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

# columns and relationships of "gamesession"
type gamesession {
  board: String!
  id: uuid!
  player1: String!
  player2: String!
  state: String!
}

# aggregated selection of "gamesession"
type gamesession_aggregate {
  aggregate: gamesession_aggregate_fields
  nodes: [gamesession!]!
}

# aggregate fields of "gamesession"
type gamesession_aggregate_fields {
  count(columns: [gamesession_select_column!], distinct: Boolean): Int
  max: gamesession_max_fields
  min: gamesession_min_fields
}

# order by aggregate values of table "gamesession"
input gamesession_aggregate_order_by {
  count: order_by
  max: gamesession_max_order_by
  min: gamesession_min_order_by
}

# input type for inserting array relation for remote table "gamesession"
input gamesession_arr_rel_insert_input {
  data: [gamesession_insert_input!]!
  on_conflict: gamesession_on_conflict
}

# Boolean expression to filter rows from the table "gamesession". All fields are combined with a logical 'AND'.
input gamesession_bool_exp {
  _and: [gamesession_bool_exp]
  _not: gamesession_bool_exp
  _or: [gamesession_bool_exp]
  board: String_comparison_exp
  id: uuid_comparison_exp
  player1: String_comparison_exp
  player2: String_comparison_exp
  state: String_comparison_exp
}

# unique or primary key constraints on table "gamesession"
enum gamesession_constraint {
  # unique or primary key constraint
  gamesession_pkey
}

# input type for inserting data into table "gamesession"
input gamesession_insert_input {
  board: String
  id: uuid
  player1: String
  player2: String
  state: String
}

# aggregate max on columns
type gamesession_max_fields {
  board: String
  id: uuid
  player1: String
  player2: String
  state: String
}

# order by max() on columns of table "gamesession"
input gamesession_max_order_by {
  board: order_by
  id: order_by
  player1: order_by
  player2: order_by
  state: order_by
}

# aggregate min on columns
type gamesession_min_fields {
  board: String
  id: uuid
  player1: String
  player2: String
  state: String
}

# order by min() on columns of table "gamesession"
input gamesession_min_order_by {
  board: order_by
  id: order_by
  player1: order_by
  player2: order_by
  state: order_by
}

# response of any mutation on the table "gamesession"
type gamesession_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [gamesession!]!
}

# input type for inserting object relation for remote table "gamesession"
input gamesession_obj_rel_insert_input {
  data: gamesession_insert_input!
  on_conflict: gamesession_on_conflict
}

# on conflict condition type for table "gamesession"
input gamesession_on_conflict {
  constraint: gamesession_constraint!
  update_columns: [gamesession_update_column!]!
  where: gamesession_bool_exp
}

# ordering options when selecting data from "gamesession"
input gamesession_order_by {
  board: order_by
  id: order_by
  player1: order_by
  player2: order_by
  state: order_by
}

# primary key columns input for table: "gamesession"
input gamesession_pk_columns_input {
  id: uuid!
}

# select columns of table "gamesession"
enum gamesession_select_column {
  # column name
  board

  # column name
  id

  # column name
  player1

  # column name
  player2

  # column name
  state
}

# input type for updating data in table "gamesession"
input gamesession_set_input {
  board: String
  id: uuid
  player1: String
  player2: String
  state: String
}

# update columns of table "gamesession"
enum gamesession_update_column {
  # column name
  board

  # column name
  id

  # column name
  player1

  # column name
  player2

  # column name
  state
}

# mutation root
type mutation_root {
  # delete data from the table: "gamesession"
  delete_gamesession(
    # filter the rows which have to be deleted
    where: gamesession_bool_exp!
  ): gamesession_mutation_response

  # delete single row from the table: "gamesession"
  delete_gamesession_by_pk(id: uuid!): gamesession

  # insert data into the table: "gamesession"
  insert_gamesession(
    # the rows to be inserted
    objects: [gamesession_insert_input!]!

    # on conflict condition
    on_conflict: gamesession_on_conflict
  ): gamesession_mutation_response

  # insert a single row into the table: "gamesession"
  insert_gamesession_one(
    # the row to be inserted
    object: gamesession_insert_input!

    # on conflict condition
    on_conflict: gamesession_on_conflict
  ): gamesession

  # update data of the table: "gamesession"
  update_gamesession(
    # sets the columns of the filtered rows to the given values
    _set: gamesession_set_input

    # filter the rows which have to be updated
    where: gamesession_bool_exp!
  ): gamesession_mutation_response

  # update single row of the table: "gamesession"
  update_gamesession_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: gamesession_set_input
    pk_columns: gamesession_pk_columns_input!
  ): gamesession
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# query root
type query_root {
  # fetch data from the table: "gamesession"
  gamesession(
    # distinct select on columns
    distinct_on: [gamesession_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [gamesession_order_by!]

    # filter the rows returned
    where: gamesession_bool_exp
  ): [gamesession!]!

  # fetch aggregated fields from the table: "gamesession"
  gamesession_aggregate(
    # distinct select on columns
    distinct_on: [gamesession_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [gamesession_order_by!]

    # filter the rows returned
    where: gamesession_bool_exp
  ): gamesession_aggregate!

  # fetch data from the table: "gamesession" using primary key columns
  gamesession_by_pk(id: uuid!): gamesession
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "gamesession"
  gamesession(
    # distinct select on columns
    distinct_on: [gamesession_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [gamesession_order_by!]

    # filter the rows returned
    where: gamesession_bool_exp
  ): [gamesession!]!

  # fetch aggregated fields from the table: "gamesession"
  gamesession_aggregate(
    # distinct select on columns
    distinct_on: [gamesession_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [gamesession_order_by!]

    # filter the rows returned
    where: gamesession_bool_exp
  ): gamesession_aggregate!

  # fetch data from the table: "gamesession" using primary key columns
  gamesession_by_pk(id: uuid!): gamesession
}

scalar uuid

# expression to compare columns of type uuid. All fields are combined with logical 'AND'.
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

